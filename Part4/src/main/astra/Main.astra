agent Main {
    module EIS eiModule;
    module Console console;
    module System system;

    types blocks {
        formula is_free(string);
        formula build_tower(string, string, string);
    }

    rule +!main(list args) {
        eiModule.launch("hw", "dependency/tower-1.3.0.jar");
        eiModule.init();
        eiModule.start();
        eiModule.link("gripper");
        console.println("Waiting for block d to appear...");
    }

    rule +$eiModule.event(block("d")) {
        console.println("Block d has been created!");

        console.println("Constructing Tower 1 with A, B, C...");
        !build_tower("a", "b", "c");
        system.sleep(2000);
        console.println("Building second tower with D, C, B...");
        !build_tower("d", "c", "b");
    }

    // Logical rule to identify if a block is free (no block is on top of it)
    inference is_free(string A) :- ~eiModule.on(string _, A);

    inference build_tower(string A, string B, string C) :- eiModule.on(A, B) & eiModule.on(B, C) & eiModule.on(C, "table");

    rule +!build_tower(string A, string B, string C) {
        !place_on(C, "table");
        !place_on(B, C);
        !place_on(A, B);
    }

    // Already placed A on B, so no action needed
    rule +!place_on(string A, string B) : eiModule.on(A, B) { }

    // Place A on B if holding A and B is free
    rule +!place_on(string A, string B) : eiModule.holding(A) & is_free(B) {
        eiModule.putdown(A, B);
        wait(eiModule.on(A, B));
    }

    // Placing block A on the table when it's not free
    rule +!place_on(string A, "table") : ~is_free(A) {
        !is_free(A);
        wait(~eiModule.on(string B, A));
        eiModule.pickup(A);
        wait(eiModule.holding(A));
        eiModule.putdown(A, "table");
        wait(eiModule.on(A, "table"));
    }

    // Block A is free, directly place it on the table
    rule +!place_on(string A, "table") : is_free(A) {
        eiModule.pickup(A);
        wait(eiModule.holding(A));
        eiModule.putdown(A, "table");
        wait(eiModule.on(A, "table"));
    }

    // Case where B is not free
    rule +!place_on(string A, string B) : ~is_free(B) {
        !is_holding(A);
        !is_free(B);
        !place_on(A, B);
    }

    // If not holding A, pick it up
    rule +!place_on(string A, string B) : ~eiModule.holding(A) {
        !is_holding(A);
        !place_on(A, B);
    }

    // Already holding A, no action required
    rule +!is_holding(string A) : eiModule.holding(A) { }

    // Block A is free, pick it up if not holding it
    rule +!is_holding(string A) : is_free(A) & ~eiModule.holding(A) {
        eiModule.pickup(A);
        wait(eiModule.holding(A));
    }

    // Already free, no need to free again
    rule +!is_free(string A) : is_free(A) { }

    // Free the block by moving the one on top of it to the table
    rule +!is_free(string A) : eiModule.on(string X, A) {
        !is_holding(X);
        eiModule.putdown(X, "table");
        wait(eiModule.on(X, "table"));
    }

    // Event triggers when A is placed on B
    rule +$eiModule.event(on(string A, string B)) {
        console.println(A + " placed on " + B);
    }

    // Event when holding a block
    rule +$eiModule.event(holding(string A)) {
        console.println("Picked up: " + A);
    }

    // Handling belief update events
    rule +$eiModule.event(funct A) {
        console.println("Belief update: " + A);
    }
}
